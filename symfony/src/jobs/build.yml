description: >
  Build symfony project

executor: docker/default

parameters:
  symfony_folder:
    type: string
    default: "apps/api"
    description: "The symfony base directory"
  use_encore:
    default: false
    description: >
      Is the project need to install encore deps ?
    type: boolean
  image_base_name:
    type: string
    description: "The docker base name eg project/api"
  dockerfile_base_name:
    type: string
    default: "Dockerfile-php"
    description: "The docker base name eg Dockerfile-api"
  use_crontab:
    default: false
    description: >
      Is the project need crontab image
    type: boolean
  image_crontab_name:
    type: string
    default: "project/crontab"
    description: "The docker crontab name eg project/api-crontab"
  dockerfile_crontab_name:
    type: string
    default: "Dockerfile-php-crontab"
    description: "The docker base name eg Dockerfile-api"
  use_ecr:
    type: boolean
    default: true
    description: "Set true to use aws ecr"
  use_docker_login:
    type: boolean
    default: false
    description: "Set true to use docker login"
  use_cache:
    type: boolean
    default: true
    description: "Set true to use build cache"
  docker_registry: 
    type: string
    default: "${DOCKER_REGISTRY}/"
    description: "The docker registry base"
  docker_folder: 
    type: string
    default: "docker"
    description: "The docker folder"
  
steps:
  - utils/install_git
  - utils/install_bash
  - restore_cache:
      keys:
          - &source-symfony-cache source-symfony-v1-{{ .Branch }}-{{ .Revision }}
          - source-symfony-v1-{{ .Branch }}-
          - source-symfony-v1-
  - checkout
  - save_cache:
      key: *source-symfony-cache
      paths:
          - ".git"
  - setup_remote_docker:  { docker_layer_caching: <<parameters.use_cache>> }
  - restore_cache:
      name: Get site deps
      keys:
        - v1-dependencies-<<parameters.symfony_folder>>-{{ checksum "~/project/<<parameters.symfony_folder>>/composer.lock" }}
  - when:
      condition: <<parameters.use_encore>>
      steps:
        - restore_cache:
            name: Get npm deps
            keys:
              - v1-npmdependencies-<<parameters.symfony_folder>>-{{ checksum "~/project/<<parameters.symfony_folder>>/package-lock.json" }}
  - restore_cache:
      name: Get public cache
      keys:
        - v1-public-<<parameters.symfony_folder>>-{{ .Revision }}
  
  - when:
      condition: <<parameters.use_ecr>>
      steps:
        - docker/ecr_login 

  - when:
      condition: <<parameters.use_docker_login>>
      steps:
        - docker/login 
  
  - when:
      condition: <<parameters.use_cache>>
      steps:
        - run:
            name: Build app
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker build --pull -t <<parameters.docker_registry>><<parameters.image_base_name>>:$CIRCLE_SHA1 -f ~/project/<<parameters.docker_folder>>/<<parameters.dockerfile_base_name>> .

  - when:
      condition:
        not: <<parameters.use_cache>>
      steps:
        - run:
            name: Build app (no cache)
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker build --pull --no-cache -t <<parameters.docker_registry>><<parameters.image_base_name>>:$CIRCLE_SHA1 -f ~/project/<<parameters.docker_folder>>/<<parameters.dockerfile_base_name>> .

  # Need to push     
  - when:
      condition: 
        or:
          - <<parameters.use_ecr>>
          - <<parameters.use_docker_login>>
      steps:
        - run:
            name: Push App
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker push <<parameters.docker_registry>><<parameters.image_base_name>>:$CIRCLE_SHA1

  # Extract to workspace
  - when:
      condition: 
        and:
            - not: <<parameters.use_ecr>>
            - not: <<parameters.use_docker_login>>
      steps:
        - run:
            name: Save image to workspace
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                mkdir -p docker-images
                docker save -o docker-images/<<parameters.image_base_name>>.$CIRCLE_SHA1.tar <<parameters.image_base_name>>:$CIRCLE_SHA1  

  - when:
      condition:
        and:
          - <<parameters.use_crontab>>
          - <<parameters.use_cache>>
      steps:
        - run:
            name: Build app
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker build --pull -t  <<parameters.docker_registry>><<parameters.image_crontab_name>>:$CIRCLE_SHA1 -f ~/project/<<parameters.docker_folder>>/<<parameters.dockerfile_crontab_name>> .

  - when:
      condition:
        and:
          - <<parameters.use_crontab>>
          - not: <<parameters.use_cache>>
      steps:
        - run:
            name: Build crontab (no cache)
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker build --pull --no-cache -t <<parameters.docker_registry>><<parameters.image_crontab_name>>:$CIRCLE_SHA1 -f ~/project/<<parameters.docker_folder>>/<<parameters.dockerfile_crontab_name>> .

  # Need to push          
  - when:
      condition: 
        and:
          - <<parameters.use_crontab>>
          - or:
              - <<parameters.use_ecr>>
              - <<parameters.use_docker_login>>
      steps:
        - run:
            name: Push crontab
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh                
                docker push <<parameters.docker_registry>><<parameters.image_crontab_name>>:$CIRCLE_SHA1

  - when:
      condition: 
        and:
          - <<parameters.use_crontab>>
          - not: <<parameters.use_ecr>>
          - not: <<parameters.use_docker_login>>
      steps:
        - run:
            name: Save image to workspace
            working_directory: ~/project
            command: |
                source ~/project/.circleci/determine_env.sh
                docker save -o docker-images/<<parameters.image_crontab_name>>.$CIRCLE_SHA1.tar <<parameters.image_crontab_name>>:$CIRCLE_SHA1  

  # Persist to workspace
  - when:
      condition: 
        and:
            - not: <<parameters.use_ecr>>
            - not: <<parameters.use_docker_login>>
      steps:
        - persist_to_workspace:
            paths:
                - docker-images
            root: ~/project
        - store_artifacts:
            path: ~/project/docker-images